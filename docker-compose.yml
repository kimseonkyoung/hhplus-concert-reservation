services:
  # ✅ Zookeeper (Kafka 실행에 필요)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - monitoring

  # ✅ Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - monitoring

  # ✅ Kafka UI (메시지 확인용)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8081:8081"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring
    depends_on:
      - redis
      - mysql
      - influxdb

  redis:
    image: docker.io/bitnami/redis:7.4
    container_name: redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_APPENDONLY=no  # 데이터 지속성 유지
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/bitnami/redis/data
    networks:
      - monitoring

  mysql:
    image: mysql:8.0
    container_name: hhplus-concert-reservation-mysql-1
    restart: always
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=application
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=hhplus
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db-data:/docker-entrypoint-initdb.d
    networks:
      - monitoring

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    volumes:
      - influxdb-storage:/var/lib/influxdb
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - influxdb
    networks:
      - monitoring

  mysqld_exporter:
    image: prom/mysqld-exporter
    container_name: mysqld_exporter
    restart: always
    environment:
      - DATA_SOURCE_NAME=application:application@(mysql:3306)/hhplus
    ports:
      - "9104:9104"
    networks:
      - monitoring
    depends_on:
      - mysql

  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    depends_on:
      - redis

networks:
  monitoring:
    driver: bridge

volumes:
  redis_data:
    driver: local
  mysql_data:
    driver: local
  influxdb-storage:
  grafana-storage:
